import java.io.*;
import java.util.*;

public class Books {
	public static void main(String[] args) {
		Kattio io = new Kattio();

		int n = io.nextInt();
		int t = io.nextInt();
		int[] books = new int[n];
		for (int i = 0; i < n; i++) { books[i] = io.nextInt(); }
		
		int right = 0;
		int left = 0;
		int cur = 0;
		int ans = 0;
		while (left < n && right < n) {
			while (right < n) {
				cur += books[right];
				right += 1;
				if (cur > t) {
					cur -= books[--right];
					break;
				}
			}
			ans = Math.max(ans,right - left);
			cur -= books[left];
			left += 1;
		}


		io.println(ans);
		io.close();
	}

	//BeginCodeSnip{Kattio}
	static class Kattio extends PrintWriter {
		private BufferedReader r;
		private StringTokenizer st;
		// standard input
		public Kattio() { this(System.in, System.out); }
		public Kattio(InputStream i, OutputStream o) {
			super(o);
			r = new BufferedReader(new InputStreamReader(i));
		}
		// USACO-style file input
		public Kattio(String problemName) throws IOException {
			super(problemName + ".out");
			r = new BufferedReader(new FileReader(problemName + ".in"));
		}
		// returns null if no more input
		public String next() {
			try {
				while (st == null || !st.hasMoreTokens())
					st = new StringTokenizer(r.readLine());
				return st.nextToken();
			} catch (Exception e) { }
			return null;
		}
		public int nextInt() { return Integer.parseInt(next()); }
		public double nextDouble() { return Double.parseDouble(next()); }
		public long nextLong() { return Long.parseLong(next()); }
	}
	//EndCodeSnip
}
